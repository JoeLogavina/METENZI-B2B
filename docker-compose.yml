version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: b2b-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: b2b_licenses
      POSTGRES_USER: b2b_user
      POSTGRES_PASSWORD: secure_password_change_in_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - b2b-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U b2b_user -d b2b_licenses"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Session Storage and Caching
  redis:
    image: redis:7-alpine
    container_name: b2b-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_change_in_production
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - b2b-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # B2B Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: b2b-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://b2b_user:secure_password_change_in_production@postgres:5432/b2b_licenses
      REDIS_URL: redis://redis_password_change_in_production@redis:6379
      SESSION_SECRET: change_this_to_a_secure_random_string_in_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - b2b-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: b2b-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - b2b-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  b2b-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local